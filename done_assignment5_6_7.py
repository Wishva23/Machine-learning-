# -*- coding: utf-8 -*-
"""Done_Assignment5_6_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZEU5FDdKRszwE_JgnDZ21YaFZ7WpEN_z

#TASK 4
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn import linear_model

"""# Assignment5

## Ground Cricket Chirps

In _The Song of Insects_ (1948) by George W. Pierce, Pierce mechanically measured the frequency (the number of wing vibrations per second) of chirps (or pulses of sound) made by a striped ground cricket, at various ground temperatures.  Since crickets are ectotherms (cold-blooded), the rate of their physiological processes and their overall metabolism are influenced by temperature.  Consequently, there is reason to believe that temperature would have a profound effect on aspects of their behavior, such as chirp frequency.

In general, it was found that crickets did not sing at temperatures colder than 60º F. or warmer than 100º F.

### Tasks

1. Find the linear regression equation for this data.
2. Chart the original data and the equation on the chart.
3. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)
4. Extrapolate data:  If the ground temperature reached 95, then at what approximate rate would you expect the crickets to be chirping?
5. Interpolate data:  With a listening device, you discovered that on a particular morning the crickets were chirping at a rate of 18 chirps per second.  What was the approximate ground temperature that morning?
"""

ground_cricket_data = {"Chirps/Second": [20.0, 16.0, 19.8, 18.4, 17.1, 15.5, 14.7,
                                         15.7, 15.4, 16.3, 15.0, 17.2, 16.0, 17.0,
                                         14.4],
                       "Ground Temperature": [88.6, 71.6, 93.3, 84.3, 80.6, 75.2, 69.7,
                                              71.6, 69.4, 83.3, 79.6, 82.6, 80.6, 83.5,
                                              76.3]}
df = pd.DataFrame(ground_cricket_data)
df

df.describe()

df.shape
df.dtypes

df.plot(y='Chirps/Second', x='Ground Temperature', style='o')
plt.title('Chirps/Second vs Ground Temperature')
plt.ylabel('Chirps/Second (˚F)')
plt.xlabel('Ground Temperature')
plt.show()

df.corr()

X = df.loc[:, ['Ground Temperature']].values
y = df.loc[:, 'Chirps/Second'].values 
from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

y_test # test data of chrips/second

X_test # test data of groound temperature

X_train.shape, y_train.shape

from sklearn.linear_model import LinearRegression # import 
regressor = LinearRegression()   # initialize
regressor.fit(X_train, y_train) #fit

print('The intercept value is :',regressor.intercept_) # best value of c
print('The co-efficient value is :',regressor.coef_)

y_pred = regressor.predict(X_test) # given the features of the test dataset, it will give the final predictions
y_pred

dt = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
dt

regressor.score(X_test,y_test)   # R2 using .score method
print('R2- SCORE:',regressor.score(X_test,y_test))

"""The R2 value is below 0.8, this is not a good fit for this data."""

temp=float(input())
regressor.predict([[temp]])  # Extrapolation

def chirps_to_temp(y):
    ret = (y - regressor.intercept_) / regressor.coef_[0]
    print('With an observation of {} chirps/sec, '
          'we expect a ground temp of {:.2f}˚F'.format(y, ret))

y=float(input())
chirps_to_temp(y)

"""# Assignment6

## Brain vs. Body Weight

In the file `brain_body.txt`, the average brain and body weight for a number of mammal species are recorded. Load this data into a Pandas data frame.

### Tasks

1. Find the linear regression equation for this data for brain weight to body weight.
2. Chart the original data and the equation on the chart.
3. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)
"""

dff = pd.read_fwf("brain_body.txt")
dff

dff.describe()

dff.shape
dff.dtypes

dff.plot(x='Body', y='Brain', style='o')
plt.title('Brain vs Body')
plt.xlabel('Body')
plt.ylabel('Brain')
plt.show()

dff.corr()

X = dff[['Body']]
y = dff['Brain'] 
from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

X_train.shape, y_train.shape

from sklearn.linear_model import LinearRegression # import 
regressor = LinearRegression()   # initialize
regressor.fit(X_train, y_train) #fit

print('The intercept value is :',regressor.intercept_) # best value of c
print('The co-efficient value is :',regressor.coef_)

y_pred = regressor.predict(X_test) # given the features of the test dataset, it will give the final predictions
y_pred

dt = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
dt

regressor.score(X_test,y_test)   # R2 using .score method
print('R2- SCORE:',regressor.score(X_test,y_test))

"""# Assignment7

## Salary Discrimination

The file `salary.txt` contains data for 52 tenure-track professors at a small Midwestern college. This data was used in legal proceedings in the 1980s about discrimination against women in salary.

The data in the file, by column:

1. Sex. 1 for female, 0 for male.
2. Rank. 1 for assistant professor, 2 for associate professor, 3 for full professor.
3. Year. Number of years in current rank.
4. Degree. Highest degree. 1 for doctorate, 0 for master's.
5. YSdeg. Years since highest degree was earned.
6. Salary. Salary/year in dollars.

### Tasks

1. Find the linear regression equation for this data using columns 1-5 to column 6.
2. Find the selection of columns with the best $R^2$ score.
3. Report whether sex is a factor in salary.
"""

df = pd.read_fwf("salary.txt", header=None, 
                 names=["Sex", "Rank", "Year", "Degree", "YSdeg", "Salary"])
df

df.head()

df.isnull().sum()

df.dtypes

dataset = df.drop_duplicates()

df.describe()

df.groupby('Sex')['Salary'].mean()

df.groupby('Sex')['Salary'].mean().plot()
plt.title('Sex vs Salary')
plt.xlabel('Sex')
plt.ylabel('Salary')
plt.show()
df[['Sex','Salary']].corr()

"""There is a linear relationship between Sex and Salary

Negative correlation 


---


"""

df.groupby('Rank')['Salary'].mean().plot()
plt.title('Rank vs Salary')
plt.xlabel('Rank')
plt.ylabel('Salary')
plt.show()
df[['Rank','Salary']].corr()

"""There is a linear relationship between Sex and Salary

positive correlation 
"""

df.groupby('Year')['Salary'].mean().plot()
df.plot(x='Year', y='Salary', style='o')
plt.title('Year vs Salary')
plt.xlabel('Year')
plt.ylabel('Salary')
plt.show()
df[['Year','Salary']].corr()

"""There is a linear relationship between year and salary 

High correlation between the data 

No transformation reqd
"""

df.groupby('Degree')['Salary'].mean().plot()
df.plot(x='Degree', y='Salary', style='o')
plt.title('Degree vs Salary')
plt.xlabel('Degree')
plt.ylabel('Salary')
plt.show()
df[['Degree','Salary']].corr()

df.groupby('YSdeg')['Salary'].mean().plot()
df.plot(x='YSdeg', y='Salary', style='o')
plt.title('YSdeg vs Salary')
plt.xlabel('YSdeg')
plt.ylabel('Salary')
plt.show()
df[['YSdeg','Salary']].corr()

"""There is a linear relationship between year and salary 

High correlation between the data 

No transformation reqd
"""

X = df[['Sex', 'Rank',	'Year', 'Degree', 'YSdeg']] #array of features
y = df['Salary'] #array of targets

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

coeff_df = pd.DataFrame(regressor.coef_,['Sex', 'Rank',	'Year', 'Degree', 'YSdeg'], columns=['Coefficient'])
y_pred = regressor.predict(X_test)
coeff_df

regressor.predict([[0,3,50,3,35]])

df1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df1

from sklearn import metrics
print('R2- SCORE:', metrics.r2_score(y_test,y_pred))

num_by_sex = df.Sex.value_counts()
print('Num men: {}\nNum women: {}'.format(num_by_sex[0], num_by_sex[1]))

df.pivot_table(index=df.index, columns='Sex', values='Salary') \
    .plot(kind='hist', alpha=0.8, stacked=True, bins=20, title='Salary by Sex')
plt.xlabel('Salary')
plt.ylabel('Range')
plt.show()

df.pivot_table(index=df.index, columns='Sex', values='Rank') \
    .plot(kind='hist', alpha=0.8, stacked=True, bins=20, title='Rank by Sex')
plt.xlabel('Rank')
plt.ylabel('Range')
plt.show()

df.pivot_table(index=df.index, columns='Sex', values='Year') \
    .plot(kind='hist', alpha=0.8, stacked=True, bins=12,
          title='Years in Rank by Sex')
plt.xlabel('Years')
plt.ylabel('Range')
plt.show()

df_sd= df[df['Year'] <= 10]

df_sd.pivot_table(index=df_sd.index, columns='Sex', values='Salary') \
    .plot(kind='hist', alpha=0.7, stacked=True, bins=20,
          title='Salary by Sex, Max 10 Years at Current Rank')
plt.xlabel('Salry')
plt.ylabel('Range')
plt.show()

df_sd.pivot_table(index=df_sd.index, columns='Sex', values='Rank') \
    .plot(kind='hist', alpha=0.7, stacked=True, 
          title='Rank by Sex, Max 10 Years at Current Rank')
plt.xticks([1,2,3])
plt.xlabel('Salary')
plt.ylabel('Range')
plt.show()